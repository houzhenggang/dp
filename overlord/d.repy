def binascii_a2b_hex(hexstr):
	table_hex = [
    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    0, 1, 2, 3,  4, 5, 6, 7,  8, 9,-1,-1, -1,-1,-1,-1,
    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,
    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1]
  
	result = []
  
  # Cannot be of odd length
	if(len(hexstr) % 2 != 0):
		raise TypeError('Odd-length string')
  
	for i in range(0,len(hexstr), 2):
		left_hex, right_hex = table_hex[ord(hexstr[i])], table_hex[ord(hexstr[i+1])]
		if left_hex < 0 or right_hex < 0:
			raise TypeError('Non-hexadecimal digit found')
		result.append(chr((left_hex << 4) + right_hex))
	return ''.join(result)

def binascii_b2a_hex(binary_data):
	  
	result = []
	for char in binary_data:
		four_bits = (ord(char) >> 4) & 0xf
		if four_bits > 9:
			four_bits = four_bits + ord('a') - 10
		else:
			four_bits = four_bits + ord('0')
		result.append(chr(four_bits))
    
		four_bits = ord(char) & 0xf
		if four_bits > 9:
			four_bits = four_bits + ord('a') - 10
		else:
			four_bits = four_bits + ord('0')
		result.append(chr(four_bits))
    
	return ''.join(result)

def check_tcp_connection(ip_list):
	for ip_list_loop in range(0, len(ip_list)):
		tcp_connection_start_time = getruntime()
		time_taken_in_tcp_connection_setup = 0
		try:
			tcp_connection = openconn(ip_list[ip_list_loop], 80)
			time_taken_in_tcp_connection_setup = getruntime() - tcp_connection_start_time
			is_alive = "1"
		except:
			time_taken_in_tcp_connection_setup = getruntime() - tcp_connection_start_time
			is_alive = "0"
			is_blocked = "1"
			print "not established"
		if is_alive == "1":
			try:
				data = "HEAD /hprofile-ak-ash3/t1.0-1/c0.39.100.100/p100x100/1000000_597524830289300_1825695678_a.jpg HTTP/1.1\r\nHost: fbcdn-profile-a.akamaihd.net\r\n\r\n"
				tcp_connection.send(data)
				time_first_bit = getruntime() - tcp_connection_start_time
				data_received = tcp_connection.recv(4096)
				data_length = len(data_received)
				time_last_bit = getruntime() - tcp_connection_start_time
				tcp_connection.close()
				is_blocked = "0"
			except:
				is_blocked = "1"
				print "blocked"
				time_first_bit = "0"
				time_last_bit = ""
				data_received = ""
		try:
			socketobject = openconn("www.cs.montana.edu",80)
			data = "GET /~utkarsh.goel/scripts/dns/fb_host_status_seattle.php?self_ip=" + getmyip() + "&tcp_connection_time=" + str(time_taken_in_tcp_connection_setup) + "&is_blocked=" + is_blocked + "&head_data_length=" + str(data_length) + "&time_last_bit=" + str(time_last_bit) + "&time_first_bit=" + str(time_first_bit) + "&is_alive=" + is_alive + "&app_server_ip=" + ip_list[ip_list_loop] + " HTTP/1.1\r\nHost: www.cs.montana.edu\r\n\r\n"
			socketobject.send(data)
		except:
			print "error in sending message"
	print "Experiment finished"
	
def f7(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]

def decode_NTP_packet(ip, port, mess, ch):
	mycontext['no_of_response_received'] = mycontext['no_of_response_received'] + 1
	dns_response = str(binascii_b2a_hex(mess))
	is_authority = int(dns_response[16:20], 16)
	if is_authority == 0:
		no_of_answer = int(dns_response[12:16], 16)
		pos_after_query = dns_response.index("00010001", 24)
		response_after_query = dns_response[pos_after_query + 8:]
		loop = 0
		initial_start = 0
		while loop < no_of_answer:
			app_server_ip = ""
			data_length = int(response_after_query[20:24], 16)
			answer_length = 24 + (data_length * 2)
			answer = response_after_query[initial_start:initial_start + answer_length]
			ttl_in_hex = answer[12:20]
			if data_length == 4:
				app_server_ip_hex = answer[len(answer) - 8:]
				inner_loop = 0
				while inner_loop < 8:
					app_server_ip = app_server_ip + str(int(app_server_ip_hex[inner_loop : inner_loop + 2], 16)) + "."
					inner_loop = inner_loop + 2
				app_server_ip = app_server_ip[:len(app_server_ip) - 1]
				ip_array_list.append(app_server_ip)
			loop = loop + 1;
			response_after_query = response_after_query[answer_length:]
	if mycontext['no_of_response_received'] == mycontext['no_of_response_expected']:
		stopcomm(ch)
		dns_result_from_local = gethostbyname_ex("fbstatic-a.akamaihd.net")
		no_of_ip_from_local_dns = len(dns_result_from_local[len(dns_result_from_local) - 1])
		for x in range(0, no_of_ip_from_local_dns):
			ip_array_list.append(dns_result_from_local[len(dns_result_from_local) - 1][x])
		check_tcp_connection(ip_array_list)
	
def send_receive_dns_message():
	loop_dns = 0
	while loop_dns < len(dns_server_array):
		sendmess(dns_server_array[loop_dns], 53, binascii_a2b_hex("0004010000010000000000000f666263646e2d70726f66696c652d6108616b616d61696864036e65740000010001"), getmyip(), 63174)
		recvmess(getmyip(), 63174, decode_NTP_packet)
		loop_dns = loop_dns + 1
		sleep(1)

while 1:
	ip_array_list = []
	dns_server_array = ["8.8.8.8", "208.67.222.222", "209.244.0.3"]
	mycontext['no_of_response_expected'] = len(dns_server_array)
	mycontext['no_of_response_received'] = 0
	send_receive_dns_message()
	sleep(600)